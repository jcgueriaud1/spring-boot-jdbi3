/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-20 ( Date ISO 2022-08-20 - Time 00:03:37 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.example.springbootjdbi3.controller;


import com.example.springbootjdbi3.entities.Book;
import com.example.springbootjdbi3.service.BookService;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;


/**
 * REST controller for managing {@link Book}.
 *
 * @author  @aek
 */
@Slf4j
@RestController
@RequestMapping("/api/book")
public class BookController {

    private final BookService entityService;

 	public BookController(BookService entityService) {
		this.entityService = entityService;
	}


    /**
     * {@code POST  /book} : Create a new Book.
     *
     * @param book the Book to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new Book.
     */
    @PostMapping()
    public ResponseEntity<Book> createBook(@RequestBody @Valid Book book) {
        log.debug("REST request to save Book : {}", book);
        return new ResponseEntity<>(entityService.create(book), HttpStatus.CREATED);
    }

    /**
     * {@code GET  /Book} : get all the Books.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of Book in body.
     */

    @GetMapping()
    public ResponseEntity<List<Book>> getAllBook() {
	    log.debug("REST request to get all books");
        List<Book> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }

    /**
     * {@code GET  /book/:id} : get the "id" Book.
     *
     * @param id the id of the Book to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the Book, or with status {@code 404 (Not Found)}.
     */
    @GetMapping(value = "/{id}")
    public ResponseEntity<Book> getOneBook(@PathVariable("id") Long id) {
        log.debug("REST request to get book : {}", id);
        Book e = entityService.getOne(id);

        return new ResponseEntity<>(e, HttpStatus.OK);
    }

}
